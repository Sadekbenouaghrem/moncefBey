datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

 model Widget {
  id String @id @map("_id") @default(auto())
}
model User {
  id            String          @id @map("_id") @default(auto())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  isAdmin       Boolean         @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order Order[] @relation("UserOrders")

  Review Review[]
}
 
model Account {
  id                String  @id @map("_id") @default(auto())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @map("_id") @default(auto())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Category {
  id          String     @id @map("_id") @default(auto())
  name        String     @unique
  products    Product[]
}

model Product {
  id          String         @id @map("_id") @default(auto())
  name        String
  description String?
  price       Float
  
  quantity    Int            @default(1)
  isFeatured  Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  categoryId  String?
  category    Category?      @relation(fields: [categoryId], references: [id])

  images      ProductImage[]

  orderItems  OrderItem[]
  reviews     Review[]
}


model ProductImage {
  id        String   @id @map("_id") @default(auto())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Order {
  id          String       @id @map("_id") @default(auto())
  userId      String?
  user        User?         @relation("UserOrders", fields: [userId], references: [id])
  status      OrderStatus  @default(PENDING)
  totalAmount Float
  address     String
  phone       String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  fullName    String
  items       OrderItem[]
}

model OrderItem {
  id         String   @id @map("_id") @default(auto())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  unitPrice  Float
}

model Review {
  id         String   @id @map("_id") @default(auto())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model HeaderSlide {
  id          String   @id @map("_id") @default(auto())
  title       String
  offer       String
  buttonText1 String
  buttonText2 String
  imgUrl      String
  createdAt   DateTime @default(now())
}